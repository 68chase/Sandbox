# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

--- 
extends: http://vwf.example.com/navscene.vwf
properties:
  navmode: none
  ambientColor:
    set: |
            var scene = vwf.views[0].state.scenes["index-vwf"].glgeScene;
            scene.setAmbientColor(value);
    get: |
            var scene = vwf.views[0].state.scenes["index-vwf"].glgeScene;
            return scene.getAmbientColor();
  ambientR:
    set: |
            this.ambientColor = 'rgb('+value+','+this.ambientG+','+this.ambientB+')';
  ambientG:
    set: |
            this.ambientColor = 'rgb('+this.ambientR+','+value+','+this.ambientB+')';
  ambientB:
    set: |
            this.ambientColor = 'rgb('+this.ambientR+','+this.ambientG+','+value+')';            
  fogColor:
    set: |  
           var scene = vwf.views[0].state.scenes["index-vwf"].glgeScene;
           scene.setFogColor(value);
    get: |
            var scene = vwf.views[0].state.scenes["index-vwf"].glgeScene;
            return scene.getFogColor();
  fogR:
    set: |  
           var color = this.fogColor;
           color.r = value/255;
           
    get: |
            var scene = vwf.views[0].state.scenes["index-vwf"].glgeScene;
            return scene.getFogColor().r * 255;
  fogG:
    set: |  
           var color = this.fogColor;
           color.g = value/255;
           
    get: |
            var scene = vwf.views[0].state.scenes["index-vwf"].glgeScene;
            return scene.getFogColor().g* 255; 
  fogB:
    set: |  
           var color = this.fogColor;
           color.b = value/255;
           
    get: |
            var scene = vwf.views[0].state.scenes["index-vwf"].glgeScene;
            return scene.getFogColor().b* 255;                
  sunR:
    set: |  
           this.sun.getColor().r = value/255;
    get: |
            this.sun.getColor().r* 255;
  sunG:
    set: |  
          this.sun.getColor().g = value/255;
    get: |
            this.sun.getColor().g* 255;
  sunB:
    set: |  
           this.sun.getColor().b = value/255;
    get: |
            this.sun.getColor().b* 255;
  sunX:
    set: |  
           this.sun.setRotX(value);
           var scene = vwf.views[0].state.scenes["index-vwf"].glgeScene;
           scene.updateMatrix();
    get: |
           this.sun.getRotX();
  sunY:
    set: |  
           this.sun.setRotY(value);
           var scene = vwf.views[0].state.scenes["index-vwf"].glgeScene;
           scene.updateMatrix();
    get: |
           this.sun.getRotY();
  sunZ:
    set: |  
           this.sun.setRotZ(value);
           var scene = vwf.views[0].state.scenes["index-vwf"].glgeScene;
           scene.updateMatrix();
    get: |
           this.sun.getRotZ();           
  fogNear:
    set: |  
           var scene = vwf.views[0].state.scenes["index-vwf"].glgeScene;
           scene.setFogNear(value);
    get: |
           var scene = vwf.views[0].state.scenes["index-vwf"].glgeScene;
           return scene.getFogNear();
  fogFar:
    set: |  
           var scene = vwf.views[0].state.scenes["index-vwf"].glgeScene;
           scene.setFogFar(value);
    get: |
           var scene = vwf.views[0].state.scenes["index-vwf"].glgeScene;
           return scene.getFogFar();
  fogType:
    set: |  
           var scene = vwf.views[0].state.scenes["index-vwf"].glgeScene;
           scene.setFogType(value);
  materialDef:
    set: |  
           return this.setTexture(value);
    get: |  
            return this.getTexture();
  skyTexture:
    set: |
            this.CreateSky(value);
  owner:
  type: scene
  EditorData:
    fogNear:
      displayname: fogNear
      property: fogNear
      type: slider
      min: 0
      max: 2000
      step: 1
    fogFar:
      displayname: fogFar
      property: fogFar
      type: slider
      min: 0
      max: 2000
      step: 1
    fogType:
      displayname: fogType
      property: fogType
      type: choice
      labels: 
        - None
        - Linear
        - Quad
        - SkyLinear
        - SkyQuad
      values:
        - 1
        - 2
        - 3  
        - 4  
        - 5  
    fogColorR:
      displayname: fogColorR
      property: fogR
      type: slider
      min: 0
      max: 256
      step: 1
    fogColorG:
      displayname: fogColorG
      property: fogG
      type: slider
      min: 0
      max: 256
      step: 1 
    fogColorB:
      displayname: fogColorB
      property: fogB
      type: slider
      min: 0
      max: 256
      step: 1
    ambientR:
      displayname: ambientR
      property: ambientR
      type: slider
      min: 0
      max: 256
      step: 1  
    ambientG:
      displayname: ambientG
      property: ambientG
      type: slider
      min: 0
      max: 256
      step: 1  
    ambientB:
      displayname: ambientB
      property: ambientB
      type: slider
      min: 0
      max: 256
      step: 1        
    sunColorB:
      displayname: sunColorB
      property: sunB
      type: slider
      min: 0
      max: 256
      step: 1
    sunColorR:
      displayname: sunColorR
      property: sunR
      type: slider
      min: 0
      max: 256
      step: 1
    sunColorG:
      displayname: sunColorG
      property: sunG
      type: slider
      min: 0
      max: 256
      step: 1
    sunRotX:
      displayname: sunRotX
      property: sunX
      type: slider
      min: 0
      max: 3.14
      step: .1
    sunRotY:
      displayname: sunRotY
      property: sunY
      type: slider
      min: 0
      max: 3.14
      step: .1   
    sunRotZ:
      displayname: sunRotZ
      property: sunZ
      type: slider
      min: 0
      max: 3.14
      step: .1
    skyTexture:
      displayname: skyTexture
      property: skyTexture
      type: choice
      labels: 
        - CloudyNoon
        - Morning
        - Evening
        - Morning2
        - Storm
        - ThunderStorm
        - Night1
        - Night2
        - Bright
      values:
        - cloudy_noon
        - early_morning
        - evening  
        - morning  
        - stormy
        - StormClouds   
        - night1
        - night2
        - bright
events:
  keyDown:
  keyUp:
methods:  
  AmLocal:
  newplayer:
  deleteplayer:
  updateCamera:
  initialize:
  receiveChat:
  CreatePlane:
  CreateSky:
  PM:
scripts:
- |


    this.initialize = function(){
 
       
       this.setCameraMode('Orbit');
       this.offset = [0,0,1];
       this.center = [0,0,0];
       this.activeCameraComp = false;
       this.loaded = false;
       this.zoom = 4;
       this.x_rot = 0.15687500000000001;
       this.y_rot = 0.5839999999999994;
       //this.updateCamera();
       this.players = [];
       this.rel_x = 0;
       this.rel_y = 0;
       this.loaded= false;
       this.leftdown= false;
       this.middledown=false;
       this.rightdown= false;
       this.last_x = 0;
       this.last_y = 0;
       this.navmode = 'none';
       
      
        $('#index-vwf').mousedown(function(e){this.localpointerDown(e);}.bind(this));
        $('#index-vwf').mouseup(function(e){this.localpointerUp(e);}.bind(this));
        $('#index-vwf').mouseleave(function(e){this.localpointerUp(e);}.bind(this));
        $('#index-vwf').mousemove(function(e){this.localpointerMove(e);}.bind(this));

       this.updateCallbacks = [];
       this.OwnedPrims = [];
      
       findscene().camera.setFovY(70);
       var ground = this.CreatePlane(250,250);
       
       var grass = new GLGE.Material();
       var grassTex = new GLGE.MaterialLayer();
       var grasstexsrc = new GLGE.Texture();
       grasstexsrc.setSrc('textures/grid2.gif');
       grassTex.setTexture(grasstexsrc);
       grassTex.setMapinput(GLGE.UV1);
       grassTex.setMapto(GLGE.M_COLOR);
       grassTex.setScaleX(1);
       grassTex.setScaleY(1);
       grass.addMaterialLayer(grassTex);
       grass.addTexture(grasstexsrc);
       ground.setMaterial(grass);
       
       this.groundplane = ground;
       
       grass.setSpecular(.0);
       grass.setShininess(15);
       var l = new GLGE.Light();
       this.sun = l;
       l.setType(2);
       l.setColor('rgb(200,200,200)');
       l.setRotX(1);
       findscene().addChild(l);
       findscene().setAmbientColor('rgb(200,200,200)');
       this.CreateSky('white');
       
       findscene().setFogType(GLGE.FOG_QUADRATIC);
       findscene().setFogFar(360);
       findscene().setFogNear(100);
       findscene().setFogColor('#FFFFFF');
       this.updateCamera();
       
         if(this.id == 'Scene-vwf') return;
          this.prerendercallback = this.placeNameTag.bind(this);
          $(document).bind('prerender',this.prerendercallback);
          this.createNameTag();
    }
    this.keyDown = function(e)
    {
      for(var i in this.children)
        this.children[i].keyDown(e);
    }
    this.keyUp = function(e)
    {
       for(var i in this.children)
        this.children[i].keyUp(e);
    }
    this.CreatePlane = function(width,height)
    {
        
        var hw = width/2;
        var hh = height/2;
        
        var planemesh = new GLGE.Mesh();
       
        var planeobj = new GLGE.Object();
        planeobj.PickPriority = 0;
        planeobj.setMesh(planemesh);
        planemesh.setPositions([-hw,-hh,-.001, hw,-hh,-.001, hw,hh,-.001, -hw,hh,-.001]);
        planemesh.setTangents([-hw,-hh,0, hw,-hh,0, hw,hh,0, -hw,hh,0]);
        planemesh.setFaces([0,1,2,2,3,0]);
        planemesh.setUV([0,0,250/4 ,0,250/4,250/4,0,250/4]);
        findscene().addChild(planeobj);
        planeobj.InvisibleToCPUPick = false;
        return planeobj;
    }
    this.CreateSky = function(sky_name)
    {
        var filter = new GLGE.Filter2d;
        findscene().setSkyFilter(filter);
        var skyboxShader= "/* From GLGE's examples/skydemo */ precision highp float;uniform samplerCube TEXTURE0;varying vec2 texCoord;varying vec3 rayCoord;void main(void) {gl_FragColor = textureCube(TEXTURE0, rayCoord.xyz);}";
        filter.addPass(skyboxShader);
        filter.setFilterType(GLGE.FILTER_SKY);
        var tex = new GLGE.TextureCube();
        
        tex.setSrcNegX('skys/'+sky_name+'_BK.jpg');
        tex.setSrcNegY('skys/'+sky_name+'_LF.jpg');
        tex.setSrcNegZ('skys/'+sky_name+'_DN.jpg');
        tex.setSrcPosX('skys/'+sky_name+'_FR.jpg');
        tex.setSrcPosY('skys/'+sky_name+'_RT.jpg');
        tex.setSrcPosZ('skys/'+sky_name+'_UP.jpg');
        
        filter.addTexture(tex);
        
    }
    this.removeUpdateCallback = function(m)
    {
        this.updateCallbacks.splice(m,1);
    }
    this.addUpdateCallback = function(val)
    {
        this.updateCallbacks.push(val);
        return this.updateCallbacks.length-1;
    }
    this.callUpdateCallbacks = function()
    {
        
        for(var i =0; i<this.updateCallbacks.length; i++)
         this.updateCallbacks[i](this);
    }
    this.followObject = function(value)
    {
        if(this.objectFollowed)
        {
            if(this.objectFollowed.updateCallbacks)
            {
                this.objectFollowed.updateCallbacks.splice(this.followcallbacknum,1);
            }
        }
        if(value)
        {
            if(value.updateCallbacks)
            {
                value.updateCallbacks.push(this.updateCamera.bind(this));
                this.followcallbacknum = value.updateCallbacks.length;
            }
        }
        this.objectFollowed = value; 
    }
    this.targetUpdated = function(obj)
    {
        if(typeof(obj) == "string")
            obj = vwf_view.kernel.kernel.models[0].model.nodes[obj];
        if(obj)
        {
        this.center = obj.translation;
        if(obj.followOffset != null)
            this.center = GLGE.addVec3(obj.translation,obj.followOffset);
        }
        
    }
    this.lookat = function(posfrom,posto,pointfront)
    {
                
                var to = GLGE.subVec3(posfrom,posto);
                to = GLGE.scaleVec3(to,1.0/GLGE.lengthVec3(to));
                var a = GLGE.crossVec3(pointfront,to);
                var tofront = goog.vec.Quaternion.createFromValues( a[0], a[1], a[2], 1 + GLGE.dotVec3(pointfront,to) );    
                var angle = 0; var axis = [0,0,1];
                var  tofront_norm = [];
                goog.vec.Quaternion.normalize(tofront,tofront_norm);    
                var currentrot = [];
               
                angle = goog.vec.Quaternion.toAngleAxis(tofront_norm,axis);
                return [axis[0],axis[1],axis[2],angle/0.0174532925];   
    }
    this.multTranslate=  function(mat, translate, result) {
     
        if(mat == undefined) return;
        if (result === undefined) {
            result = [];
        }
        if (result !== mat) {
            for(var i = 0; i < mat.length; i++)
                result.push(mat[i]);
        }

        var val;
        if (translate[0] !== 0.0) {
            val = translate[0];
            result[12] += val * mat[0];
            result[13] += val * mat[1];
            result[14] += val * mat[2];
            result[15] += val * mat[3];
        }

        if (translate[1] !== 0.0) {
            val = translate[1];
            result[12] += val * mat[4];
            result[13] += val * mat[5];
            result[14] += val * mat[6];
            result[15] += val * mat[7];
        }

        if (translate[2] !== 0.0) {
            val = translate[2];
            result[12] += val * mat[8];
            result[13] += val * mat[9];
            result[14] += val * mat[10];
            result[15] += val * mat[11];
        }
        return result;
    },
    this.normalize = function(vec)
    {   
    
        if(vec == undefined) return;
        return GLGE.scaleVec3(vec,1.0/GLGE.lengthVec3(vec));
    }
    this.makeLookAt = function(eye, center, up, result) {
    
        if(eye == undefined) return;
       
        if (result === undefined) {
            result = [];
        }

        var f = GLGE.subVec3(center, eye);
        f = this.normalize(f);

        var s = GLGE.subVec3(f, up);
        s = this.normalize(s);

        var u = GLGE.crossVec3(s, f);
        u =this.normalize(u);

        // s[0], u[0], -f[0], 0.0,
        // s[1], u[1], -f[1], 0.0,
        // s[2], u[2], -f[2], 0.0,
        // 0,    0,    0,     1.0

        result[0]=s[0]; result[1]=u[0]; result[2]=-f[0]; result[3]=0.0;
        result[4]=s[1]; result[5]=u[1]; result[6]=-f[1]; result[7]=0.0;
        result[8]=s[2]; result[9]=u[2]; result[10]=-f[2];result[11]=0.0;
        result[12]=  0; result[13]=  0; result[14]=  0;  result[15]=1.0;
        
        var tra = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];        
        tra[12] = -eye[0];
        tra[13] = -eye[1];
        tra[14] = -eye[2];
        var newresult = GLGE.mulMat4(result,tra);
        return newresult;
    }
    this.GetWorldPickRay = function(e)
    {

       var OldX = e.clientX - $('#index-vwf').offset().left;
        var OldY = e.clientY - $('#index-vwf').offset().top;

        var screenmousepos = [OldX/document.getElementById('index-vwf').clientWidth,OldY/document.getElementById('index-vwf').clientHeight,0,1];
        screenmousepos[0] *= 2;
        screenmousepos[1] *= 2;
        screenmousepos[0] -= 1;
        screenmousepos[1] -= 1;
        screenmousepos[1] *= -1;
        var worldmousepos = GLGE.mulMat4Vec4(GLGE.inverseMat4(findscene().camera.getViewProjection()),screenmousepos);
        worldmousepos[0] /= worldmousepos[3];
        worldmousepos[1] /= worldmousepos[3];
        worldmousepos[2] /= worldmousepos[3];


        var campos = [findscene().camera.getLocX(),findscene().camera.getLocY(),findscene().camera.getLocZ()];
        var ray = GLGE.subVec3(worldmousepos,campos);
        var dist = GLGE.lengthVec3(ray);
        ray = GLGE.scaleVec3(ray,1.0/GLGE.lengthVec3(ray));
        return ray;
    }
    this.intersectLinePlane = function(ray,raypoint,planepoint,planenormal)
    {
        var n = GLGE.dotVec3(GLGE.subVec3(planepoint,raypoint),planenormal);
        var d = GLGE.dotVec3(ray,planenormal);
        if(d == 0)
            return null;

        var dist = n/d;

        return dist;
    }
    this.localpointerDown = function( parms, pickInfo ){
     
     
      if(parms.which == 1) this.leftdown = true;
      if(parms.which == 2) this.middledown = true;
      if(parms.which == 3) this.rightdown = true;
     
      this.last_x = parms.clientX/window.screen.width;
      this.last_y = parms.clientY/window.screen.height;
      
      if(this.cameramode == 'Navigate')
      {
             
           var campos = [findscene().camera.getLocX(),findscene().camera.getLocY(),findscene().camera.getLocZ()];
           var ray = this.GetWorldPickRay(parms);

           var dxy = this.intersectLinePlane(ray,campos,[0,0,0],[0,0,1]);
           var oldintersectxy = GLGE.addVec3(campos,GLGE.scaleVec3(ray,dxy));
           
           oldintersectxy = findscene().CPUPick(campos,ray).point;
           
           this.navpoint =  oldintersectxy;
      }
     
    }
    this.localpointerUp = function( parms, pickInfo ){
      
      if(parms.which == 1) this.leftdown = false;
      if(parms.which == 3) this.rightdown = false;
      if(parms.which == 2) this.middledown = false;
    }
    this.localpointerMove = function( parms, pickInfo ){

      if(document.AxisSelected != null)  
      if(document.AxisSelected != -1)
        return;
        
      if(this.rel_x == undefined) return;
      
      this.rel_x = this.last_x - parms.clientX/window.screen.width;
      this.rel_y = this.last_y - parms.clientY/window.screen.height;
      
      if((this.rightdown==true && this.middledown==false))
      {
      
        this.x_rot += this.rel_x;
        this.y_rot += this.rel_y;
        this.updateCamera();
        
      }
      
      if((this.cameramode == 'Orbit'|| this.cameramode == 'Free' ) && this.middledown == true )
      {
        
        
        var screenmousepos = [parms.clientX/window.screen.width,parms.clientY/window.screen.height,0,1];
        screenmousepos[0] *= 2;
        screenmousepos[1] *= 2;
        screenmousepos[0] -= 1;
        screenmousepos[1] -= 1;
        screenmousepos[1] *= -1;
        var worldmousepos = GLGE.mulMat4Vec4(GLGE.inverseMat4(findscene().camera.getViewProjection()),screenmousepos);
        worldmousepos[0] /= worldmousepos[3];
        worldmousepos[1] /= worldmousepos[3];
        worldmousepos[2] /= worldmousepos[3];
       
        screenmousepos = [this.last_x,this.last_y,0,1];
        screenmousepos[0] *= 2;
        screenmousepos[1] *= 2;
        screenmousepos[0] -= 1;
        screenmousepos[1] -= 1;
        screenmousepos[1] *= -1;
        var worldmousepos2 = GLGE.mulMat4Vec4(GLGE.inverseMat4(findscene().camera.getViewProjection()),screenmousepos);
        worldmousepos2[0] /= worldmousepos2[3];
        worldmousepos2[1] /= worldmousepos2[3];
        worldmousepos2[2] /= worldmousepos2[3];
       
        this.center = GLGE.addVec3(this.center,GLGE.scaleVec3(GLGE.subVec3(worldmousepos2,worldmousepos),5 * this.zoom));
        this.updateCamera();
        
      }
      
      if(this.cameramode == 'Navigate' && this.middledown == true)
      {   
           
           var campos = [findscene().camera.getLocX(),findscene().camera.getLocY(),findscene().camera.getLocZ()];
           var ray = this.GetWorldPickRay(parms);

           var dxy = this.intersectLinePlane(ray,campos,[0,0,this.navpoint[2]],[0,0,1]);
           var newintersectxy = GLGE.addVec3(campos,GLGE.scaleVec3(ray,dxy));
           
           var len  = GLGE.subVec3(this.navpoint,newintersectxy)
           
           this.center = GLGE.addVec3(this.center,GLGE.subVec3(this.navpoint,newintersectxy));
          
           this.updateCamera();
      }
      
      this.last_x = parms.clientX/window.screen.width;
      this.last_y = parms.clientY/window.screen.height;
    }
    this.updateCamera = function()
      {
        
        
        
        if(this.objectFollowed != null)    
            this.targetUpdated(this.objectFollowed);
        
        if(this.cameramode != 'FirstPerson')
        {
            if(this.x_rot == undefined) return;
            var xmatrix = GLGE.angleAxis(this.x_rot*10,[0,0,1]);
            
            var offset = GLGE.mulMat4Vec3(xmatrix,[1,0,0]);
            offset = GLGE.scaleVec3(offset,1/GLGE.lengthVec3(offset));
            var side = GLGE.crossVec3([0,0,1],offset);
           
            if(this.y_rot < .479) this.y_rot = .479;
            if(this.y_rot > .628) this.y_rot = .628;
            
            var crossmatrix = GLGE.angleAxis(this.y_rot*10,side);
            var stage2offset = GLGE.mulMat4Vec3(crossmatrix,offset);
            
            stage2offset = GLGE.scaleVec3(stage2offset,1/GLGE.lengthVec3(stage2offset));
            var finaloffset = GLGE.scaleVec3(stage2offset,this.zoom);
            if(this.center[2] < .05)
             this.center[2] = .05;
            var finalpos = GLGE.addVec3(finaloffset,this.center);
            
            //this.camera.translation = finalpos;
            findscene().camera.setLoc(finalpos[0],finalpos[1],finalpos[2]);
            findscene().camera.Lookat(this.center);
            findscene().camera.setFar(Math.abs(1000));
            findscene().camera.setNear(Math.abs(.1));
        }else
        {
            
            var rotation = this.objectFollowed.rotation;
            var xmatrix = GLGE.angleAxis(rotation[3]*0.0174532925,[rotation[0],rotation[1],rotation[2]]);
            var offset = GLGE.mulMat4Vec3(xmatrix,[0,1.5,.5]);
            
            var finaldist = GLGE.lengthVec3(offset);  
            offset = GLGE.scaleVec3(offset,1/finaldist);            
            var start = GLGE.addVec3(this.center,GLGE.scaleVec3(offset,.3));
            
            var oldpickstate = findviewnode(this.objectFollowed.id).InvisibleToCPUPick;
            findviewnode(this.objectFollowed.id).InvisibleToCPUPick = true;
            var hit = findscene().CPUPick(start,GLGE.scaleVec3(offset,1));
            if(hit)
            {
                finaldist = Math.min(finaldist,hit.distance-.2);
            }
            findviewnode(this.objectFollowed.id).InvisibleToCPUPick = oldpickstate;
            offset = GLGE.scaleVec3(offset,finaldist);
            
            var finalpos = GLGE.addVec3(offset,start);
            findscene().camera.setLoc(finalpos[0],finalpos[1],finalpos[2]);
            findscene().camera.Lookat(this.center);
            
        }
        this.callUpdateCallbacks();
      }
      function findscene()
      {
             return vwf.views[0].state.scenes["index-vwf"].glgeScene;
      }
    this.setCameraMode = function(mode)
    {
        this.cameramode = mode;
        if(this.cameramode == 'Orbit')
            this.followObject(null);
        if(this.cameramode == 'Free')
        {
           this.ReprojectCameraCenter();
           this.followObject(null);
        }
    }
    this.orbitPoint = function(point)
    {
        this.setCameraMode('Orbit');
        var campos = [findscene().camera.getLocX(),findscene().camera.getLocY(),findscene().camera.getLocZ()];
        var diff = GLGE.subVec3(campos,point);
        var length = GLGE.lengthVec3(diff);
        diff = GLGE.scaleVec3(diff,1.0/length);
        //this.offset = diff;
        this.zoom = length;
        this.center = point;
        this.objectFollowed = null;
        
    }
    this.ReprojectCameraCenter = function()
    {
            var campos = [findscene().camera.getLocX(),findscene().camera.getLocY(),findscene().camera.getLocZ()];
            var worldmousepos  = this.GetCameraCenterRay();
            worldmousepos = GLGE.scaleVec3(worldmousepos,.4);
            this.center = GLGE.addVec3(worldmousepos,campos);  
            this.zoom = .4;
    }
    this.GetCameraCenterRay = function()
    {
        var screenmousepos = [0,0,0,1];
        var worldmousepos = GLGE.mulMat4Vec4(GLGE.inverseMat4(findscene().camera.getViewProjection()),screenmousepos);
        worldmousepos[0] /= worldmousepos[3];
        worldmousepos[1] /= worldmousepos[3];
        worldmousepos[2] /= worldmousepos[3];


        var campos = [findscene().camera.getLocX(),findscene().camera.getLocY(),findscene().camera.getLocZ()];
        var ray = GLGE.subVec3(worldmousepos,campos);
        var dist = GLGE.lengthVec3(ray);
        ray = GLGE.scaleVec3(ray,1.0/GLGE.lengthVec3(ray));
        return ray;
    }    
    this.pointerLeave = function( parms ){

    }
    this.pointerWheel = function( parms, pickInfo ) {
       
        if(this.client != this.moniker) return;
        if(this.cameramode != 'Navigate')
        { 
            if(pickInfo.wheel.deltaY < 0 )
            this.zoom *= 1.1;
            else
            this.zoom *= .9;
        }
        if(this.cameramode == 'Navigate')
        {  
            this.center = GLGE.addVec3(this.center,GLGE.scaleVec3(GLGE.subVec3(this.navpoint,this.center),.05));
            this.zoom = this.zoom + (3- this.zoom )*.01;
        }
        
        this.updateCamera();
    }
    this.deleteplayer = function(e)
    {
        
       
        var player = vwf_view.kernel.kernel.models[0].model.nodes[e];
        if(!player)
            player = vwf_view.kernel.kernel.models[0].model.nodes['-object-Object-'+e];
        var num = player.PlayerNumber;
        PlayerDeleted(num);
        
        player.deinitialize();
        
        
        
    }
    this.receiveChat = function(e)
    {
        ChatMessageReceived(e);
    }
    this.PM = function(e)
    {
        PMReceived(e);
    }
    function nodeExists(tempid)
    {
        for(var i in vwf.models.object.objects)
            if (vwf.models.object.objects[i].properties.tempid == tempid) return true;
        
        return false;
    }
    
    function findviewnode(id)
    {
        for(var i =0; i<vwf.views.length;i++)
        {
            if(vwf.views[i].state.nodes[id].glgeObject) return vwf.views[i].state.nodes[id].glgeObject;
        }
        return null;
    }
    
    this.newplayer = function(e)
    {
        
       
        this.loaded = true;
        var proto = JSON.parse(e);
        //this.players.push(proto);
        //Because SendSelf will create circular messages, don't create a guy who is already created.
        var newname = "player-"+proto.properties.PlayerNumber;
        this.future(.1).updateCamera();
        if(!document[proto.properties.PlayerNumber + 'link'])
        {
            this.players.push(proto.properties.PlayerNumber);
            _UserManager.PlayerCreated(proto.properties.PlayerNumber);
           
            //This is odd. It seems like supplying an ID for the new object causes the initialize not to fire
            delete proto.id;//"player-"+proto.properties.PlayerNumber;
            proto.uri = "-object-Object-player-"+proto.properties.PlayerNumber;
            //vwf_view.kernel.kernel.createNode(proto,  function(){this.updateCamera();vwf_view.kernel.kernel.models[0].model.nodes[proto.id].initialize();
            //}.bind(this));
            this.children.create("player-"+proto.properties.PlayerNumber,proto);
            
            
            
        }
        
    }
    
    this.getTexture = function()
    {
            if(this.materialDef) return this.materialDef;    
           
            var newMaterial = {};
            var currentMaterial = this.groundplane.getMaterial();
            if(!currentMaterial)
                return;
            newMaterial.shininess = currentMaterial.getShininess();
            newMaterial.alpha = currentMaterial.getAlpha();
            newMaterial.ambient = currentMaterial.getAmbient();
            newMaterial.color = currentMaterial.getColor();
            newMaterial.emit = currentMaterial.getEmit();
            newMaterial.reflect = currentMaterial.getReflectivity();
            newMaterial.shadeless = currentMaterial.getShadeless();
            newMaterial.shadow = currentMaterial.getShadow();
            
            newMaterial.specularColor = currentMaterial.getSpecularColor();
            newMaterial.specularLevel = Math.sqrt(newMaterial.specularColor.r * newMaterial.specularColor.r + newMaterial.specularColor.g * newMaterial.specularColor.g + newMaterial.specularColor.b * newMaterial.specularColor.b);
            newMaterial.specularColor.r = newMaterial.specularColor.r/newMaterial.specularLevel || 0.01;
            newMaterial.specularColor.g = newMaterial.specularColor.g/newMaterial.specularLevel || 0.01;
            newMaterial.specularColor.b = newMaterial.specularColor.b/newMaterial.specularLevel || 0.01;
            newMaterial.layers = [];
            for(var i = 0; i<currentMaterial.layers.length;i++)
            {
                var newLayer = {};
                newMaterial.layers.push(newLayer);
                newLayer.src = currentMaterial.layers[i].getTexture().getSrc();
                newLayer.mapTo = currentMaterial.layers[i].getMapto();
                newLayer.blendMode = currentMaterial.layers[i].getBlendMode();
                newLayer.alpha = currentMaterial.layers[i].getAlpha();
                
                newLayer.scalex = currentMaterial.layers[i].getScaleX();
                newLayer.scaley = currentMaterial.layers[i].getScaleY();
                newLayer.offsetx = currentMaterial.layers[i].getOffsetX();
                newLayer.offsety = currentMaterial.layers[i].getOffsetY();
                newLayer.rot = currentMaterial.layers[i].getRotZ();
                newLayer.mapInput = currentMaterial.layers[i].getMapinput();
            }            
            return newMaterial;
    
    }
    this.setTexture = function(value)
    {
             
             var newMaterial = value || vwf.getProperty(this.id,'materialDef') ;//|| {shininess:10,alpha:1,ambient:{r:0,g:0,b:0},color:{r:1,g:1,b:1},emit:{r:0,g:0,b:0},reflect:.08,shadeless:false,shadow:true};
             if(!newMaterial) return;
             var currentMaterial = this.groundplane.getMaterial();
             if(!currentMaterial) return;
             currentMaterial.setShininess(newMaterial.shininess);
             currentMaterial.setAlpha(newMaterial.alpha);
             currentMaterial.setAmbient(newMaterial.ambient);
             currentMaterial.setColor(newMaterial.color);
             currentMaterial.setEmit(newMaterial.emit);
             currentMaterial.setReflectivity(newMaterial.reflect);
             currentMaterial.setShadeless(newMaterial.shadeless);
             currentMaterial.setShadow(newMaterial.shadow);
            
             
             
             
             newMaterial.specularColor.r = newMaterial.specularColor.r || 0.01;
             newMaterial.specularColor.g = newMaterial.specularColor.g || 0.01;
             newMaterial.specularColor.b = newMaterial.specularColor.b || 0.01;
             
             var norm = Math.sqrt(newMaterial.specularColor.r * newMaterial.specularColor.r + newMaterial.specularColor.g * newMaterial.specularColor.g + newMaterial.specularColor.b * newMaterial.specularColor.b);
             newMaterial.specularColor.r /= norm;
             newMaterial.specularColor.g /= norm;
             newMaterial.specularColor.b /= norm;
             
             newMaterial.specularColor.r *= newMaterial.specularLevel;
             newMaterial.specularColor.g *= newMaterial.specularLevel;
             newMaterial.specularColor.b *= newMaterial.specularLevel;
             currentMaterial.setSpecularColor(newMaterial.specularColor);
             for(var i=0 ; i < newMaterial.layers.length; i++)
             {
                var layer = currentMaterial.layers[i];
                var newLayer = newMaterial.layers[i];
                if(!layer)
                {
                    layer = new GLGE.MaterialLayer();
                    layer.setMapinput(GLGE.UV1);
                    currentMaterial.addMaterialLayer(layer);
                }
                
                layer.setMapto(newLayer.mapTo);
                layer.setBlendMode(newLayer.blendMode);
                layer.setAlpha(newLayer.alpha);
                
                layer.setScaleX(newLayer.scalex);
                layer.setScaleY(newLayer.scaley);
                layer.setOffsetX(newLayer.offsetx);
                layer.setOffsetY(newLayer.offsety);
                layer.setRotZ(newLayer.rot);
                layer.setMapinput(newLayer.mapInput );
                
                var texture = layer.getTexture();
                if(texture && texture.getSrc() != newMaterial.layers[i].src)
                {
                    //currentMaterial.removeTexture(texture);
                    layer.setTexture(null);
                    texture = null;
                }
                if(!texture)
                {
                    texture = new GLGE.Texture();
                    layer.setTexture(texture);
                    currentMaterial.addTexture(texture);
                    texture.setSrc(newMaterial.layers[i].src);
                }
                
             }
             while(currentMaterial.layers.length > newMaterial.layers.length)
                currentMaterial.removeMaterialLayer(currentMaterial.layers[currentMaterial.layers.length -1])
    
    }
    this.createNameTag = function()
    {
    
      var newdiv = document.createElement('img');
      $(newdiv).attr('style',"text-transform: uppercase; font-weight: bold; position: fixed; left: 612.7792636991876px; top: 350.056008871367px; color: white; text-shadow: black 0.1em 0.1em 0.4em; ");
      newdiv.style.position = 'fixed';
      newdiv.id = "Player " + this.name + 'icon';
      //newdiv.innerHTML = "" + this.name;
      $(newdiv).attr('src','../vwf/view/editorview/images/icons/scene.png');
      newdiv.style.left = '0px';
      newdiv.style.top = '0px';
      
      $(document.body).append(newdiv);
      $(newdiv).disableSelection();
      //$(newdiv).mousedown(_Editor.mousedown);
      //$(newdiv).mouseup(_Editor.mouseup);
      //$(newdiv).mousemove(_Editor.mousemove);
      $(newdiv).click(function(e){if(_Editor.GetSelectMode() != "None")  _Editor.SelectObject(this.id)}.bind(this));
      this.nametag = newdiv;
                 
    }
    this.deinitialize = function()
    {
       $(document).unbind('prerender',this.prerendercallback);
       $(this.nametag).remove();
    }
    this.placeNameTag = function(e,viewprojection)
    {
      
      var rootdiv = document.getElementById('index-vwf');
      var h = rootdiv.style.height;
      var w = rootdiv.style.width;
      var wh = parseInt(h.substr(0,h.length-2));
      var ww = parseInt(w.substr(0,w.length-2));
      var div = this.nametag;
      var pos = [0,0,0];
      pos = [pos[0],pos[1],pos[2],1];
         
      
      
      var screen = GLGE.mulMat4Vec4(viewprojection,pos);
      screen[0] /= screen[3];
      screen[1] /= screen[3];
     
      screen[0] /= 2;
      screen[1] /= 2;
      screen[2] /= 2;
      screen[0] += .5;
      screen[1] += .5;
      
  
      screen[0] *= ww;
      screen[1] *= wh;
      
     
      screen[1] = wh - screen[1];

      div.style.top = (screen[1]+35)  +  'px';
      div.style.left = (screen[0]  - div.offsetWidth/2)  +'px';
     
     
      if((screen[0] < 0 || screen[0] > ww || screen[1] < 0 || screen[1] > wh))
      {
            if(div.style.display != 'none')
                div.style.display = 'none';
      }
      else
      {
          if((screen[2] > 10 || screen[2] < 0) && div.style.display != 'none')
             div.style.display = 'none';
          if(screen[2] < 10 && screen[2] > 0 && div.style.display == 'none')
             div.style.display = 'block';
      }
         
      
         
    }    
          

	  
    
    
 
 
   

   