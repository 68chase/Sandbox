# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
---

extends: asset.vwf
properties:
  translation:
  rotZ: 0       
  test:  
  motionStack: []
  activeCycle: []
methods:
  update:
  tick:
  attached:
events:
  pointerOver:
  pointerOut:
  keyUp:
  keyDown:
scripts:
- |
    this.attached = function()
    {
        //called when added to the scene, after initialize is called and parent is set.
        this.parent.newClient(this.PlayerNumber);
    }
    this.initialize = function(){

        
        if(this.id == 'character-vwf') return;
        
         this.DownKeys= [];
        // this.motionStack= [];
         this.jumpcounter = 0;
        
       
       
        
       
        
        if(this.hasOwnProperty('PlayerNumber') == false) return;
        var PlayerNumber = vwf.getProperty(this.id,'PlayerNumber');
        
        
        if(!document[PlayerNumber + 'link'])
        {
            //this.parent.players.push(PlayerNumber); 
            document[PlayerNumber +'link'] = this;
            _UserManager.PlayerCreated(PlayerNumber,this.id);
        }
        
       
        
        
        this.originalvelocity = [0,0,0];
        this.updateCallbacks = [];
         if(document.PlayerNumber == PlayerNumber)
          {
            
            
            //findVWFscene().followObject(this);
            
          }
         
        
          this.prerendercallback = this.placeNameTag.bind(this);
          _dView.bind('postprerender',this.prerendercallback);
           //this.callbacknum = findVWFscene().addUpdateCallback(this.placeNameTag.bind(this));
          this.updatecounter = 0;
          this.mesh = findChildViewNode(findscene(),this.id);
          //debugger;
          //this.mesh.sceneManagerIgnore();
         // if(!this.mesh)
           
        //  this.mesh.children[0].children[0].children[0].position.z = -.85
        //  this.mesh.children[0].children[0].children[0].updateMatrixWorld(true);
          
          var findSkin = function(root)
          {
              if(root instanceof THREE.SkinnedMesh) return root;
              var found = null;
              for(var i =0; i < root.children.length; i++)
              {
                found = findSkin(root.children[i]);
                if(found) return found;
              }

          }

          this.skin = findSkin(this.mesh);
          this.skin.material.ambient.r = 1;
          this.skin.material.ambient.g = 1;
          this.skin.material.ambient.b = 1;
          this.skin.castShadow = true;
          this.skin.isAvatar = true;
          this.jumpcounter = 0.0;
          //this.stand();
         
          this.createNameTag(PlayerNumber);
          this.followOffset = [0,0,1.733];
         
          this.initCycles();
        //  this.activeCycle = this.cycles.stand;
          this.updateLoopStarted = false;
          var now = performance.now();
          this.lastUpdate = now;
          //window.setTimeout(function(){document[PlayerNumber +'link'].startloop();},500);


          this.pickoptions = {
            filter:function(o){
                if(o instanceof THREE.Line) return false;
                return !(o.isAvatar === true || o.passable===true)
              },maxDist: 2,
              ignore:[this.mesh,_Editor.GetMoveGizmo()]
            }
    }
    this.pointerOver = function(e)
    {
        
    }
    this.pointerOut = function(e)
    {
        
    }
    this.initCycles = function()
    {
        var cycles = this.cycles.internal_val;
        for(var i in cycles)
        {
            cycles[i].getFrame = function() { 
                    return this.current + this.start;
                }.bind(cycles[i]);
            cycles[i].increment = function(steps) { 
                    this.current+=this.speed * steps;
                    if(this.current >= this.length && this.loop == true)
                        this.current = 0;
                    if(this.current < 0 && this.loop == true)
                        this.current = this.length;    
                    if(this.current >= this.length && this.loop == false)
                        this.current = this.length-1;
                    return this.getFrame();
                }.bind(cycles[i]);
            cycles[i].reset = function() {
                    this.current=0;
            }.bind(cycles[i]);
        }
    }
    this.createNameTag = function(PlayerNumber)
    {
    
      var newdiv = document.createElement('div');
      $(newdiv).attr('style',"text-transform: uppercase; font-weight: bold; position: fixed; left: 612.7792636991876px; top: 350.056008871367px; color: white; text-shadow: black 0.1em 0.1em 0.4em; ");
      newdiv.style.position = 'fixed';
      newdiv.id = "Player " + PlayerNumber + 'label';
      newdiv.innerHTML = "" + PlayerNumber;
      newdiv.style.left = '0px';
      //newdiv.style.top = '0px';
      
      $(document.body).append(newdiv);
      newdiv._offsetWidth = newdiv.offsetWidth;
      $(newdiv).disableSelection();
      this.nametag = newdiv;
                 
    }
    this.deinitialize = function()
    {
       //findVWFscene().removeUpdateCallback(this.callbacknum);
       _dView.unbind('postprerender',this.prerendercallback);
        _UserManager.PlayerDeleted(this.PlayerNumber);
       //this.deleteMe = true;            
       $(this.nametag).remove()
       
    }
    this.placeNameTag = function(e,viewprojection,wh, ww)
    {
        
      if(!this.ownerClientID)  
        return;
    
      
      var div = this.nametag;
      var pos = this.tbak;
      if(!pos) return;
      pos = [pos[0],pos[1],pos[2]+1.75,1];
         
      var screen = MATH.mulMat4Vec4(viewprojection,pos);
      screen[0] /= screen[3];
      screen[1] /= screen[3];
     
      screen[0] /= 2;
      screen[1] /= 2;
      screen[2] /= 2;
      screen[0] += .5;
      screen[1] += .5;
      
  
      screen[0] *= ww;
      screen[1] *= wh;
      
      screen[1] = wh - screen[1];

      div.style.top = (screen[1]  +   $("#index-vwf").offset().top) + 'px' ;
      div.style.left = (screen[0] - div._offsetWidth/2)  +'px';
     
      
      if((screen[0] < 0 || screen[0] > ww || screen[1] < 0 || screen[1] > wh))
      {
            if(div.style.display != 'none')
                div.style.display = 'none';
      }
      else
      {
          if((screen[2] > 10 || screen[2] < 0) && div.style.display != 'none')
             div.style.display = 'none';
          if(screen[2] < 10 && screen[2] > 0 && div.style.display == 'none')
             div.style.display = 'block';
      }
         
         
    }
    this.startloop = function()
    {
        if(this.updateLoopStarted == false)
        {
            this.update(this.moniker);
            this.updateLoopStarted = true;
        }
    }
    this.filterContactsByNormal = function(contacts)
    {
       
        var passed = []
        var keys = [];
        for(var i = 0; i < contacts.length; i++)
        {
            var c = contacts[i];
            var id = c.norm.join(',');
            if(keys.indexOf(id) == -1)
            {   
                keys.push(id);
                passed.push(c);
            }
        }
        return passed;
        
    }
    this.update = function(moniker)
    {
       
      
        this.updatecounter++;
        var updateFreqDivisor = 1;
        
        if(this.id == 'character-vwf') return;
       
        
        
        
          var backupr = this.rotation;
          backupr = [0,0,1,this.rotZ/0.0174532925];
        
      
        var standing = this.standing;
        if(this.activeCycle[this.activeCycle.length-1])
        {
           
            var newframe = this.cycles[this.activeCycle[this.activeCycle.length-1]].increment(updateFreqDivisor);
            newframe = Math.max(newframe,0);
           
            if(this.currentframe != newframe)
            {
                
               
               
               //for(var i = 0; i < this.skin.morphTargetInfluences.length; i++)
               //     this.skin.morphTargetInfluences[i] = 0;
               
               //this.skin.morphTargetInfluences[parseInt(newframe)] = 1;     
               this.animationFrame = newframe;
              
            }
            this.prevframe = this.currentframe;
            this.currentframe = newframe;
        }else
        {
        
        
        }
        
        
        var backupt = [this.translation[0],this.translation[1],this.translation[2]];
        var finalt = backupt.slice(0);
        var originalpos = backupt.slice(0);
        var originalpos2 = backupt.slice(0);
       
        if(this.motionStack.length == 0)
            this.stand();
        
        var motionvec;
        
        if(this.motionStack.length)
            this.playSound('./vwfDataManager.svc/datafile/sounds/footsteps.mp3',true,.1);
        else
            this.pauseSound('./vwfDataManager.svc/datafile/sounds/footsteps.mp3');
        
        for(var i=0; i < this.motionStack.length; i++)
        {
            this.cycleName =  this.motionStack[i];
            if(this.cycleName == 'turnright')
            {
                this.rotZ += -.07*updateFreqDivisor;
               // this.mesh.setRotZ(this.rotZ);
               backupr = [0,0,1,this.rotZ/0.0174532925];
            }
            if(this.cycleName == 'turnleft')
            {
                this.rotZ += +.07*updateFreqDivisor;
               // this.mesh.setRotZ(this.rotZ);
               backupr = [0,0,1,this.rotZ/0.0174532925];
            }
             if(this.cycleName == 'straferight')
            {
                 motionvec = MATH.mulMat4Vec3(MATH.angleAxis(backupr[3]*0.0174532925,[backupr[0],backupr[1],backupr[2]]),[-.03*updateFreqDivisor,0,0]);
                
            }
            if(this.cycleName == 'strafeleft')
            {
                 motionvec = MATH.mulMat4Vec3(MATH.angleAxis(backupr[3]*0.0174532925,[backupr[0],backupr[1],backupr[2]]),[.03*updateFreqDivisor,0,0]);
                 
            }
            if(this.cycleName == 'walk')
            {
                    motionvec = MATH.mulMat4Vec3(MATH.angleAxis(backupr[3]*0.0174532925,[backupr[0],backupr[1],backupr[2]]),[0,-.06*updateFreqDivisor,0]);
                    
            }
            if(this.cycleName == 'walkback')
            {
                    motionvec = MATH.mulMat4Vec3(MATH.angleAxis(backupr[3]*0.0174532925,[backupr[0],backupr[1],backupr[2]]),[0,+.06*updateFreqDivisor,0]);
                   
            }
            if(this.cycleName == 'run')
            {
                    motionvec = MATH.mulMat4Vec3(MATH.angleAxis(backupr[3]*0.0174532925,[backupr[0],backupr[1],backupr[2]]),[0,-.140*updateFreqDivisor,0]);
                    
            }
            
            
            
            if(this.cycleName == 'jump')
            {  
                var preptime = 5.5;
                var height = 36;
                var heighttimeoffset = Math.sqrt(height);
                var hangtime = 17;
                if(this.jumpcounter >= (hangtime+preptime+preptime))
                {
                
                    this.removeMotion('jump');
                    this.removeCycle('jump');
                    this.jumpcounter  = 0;
                }
                
                var jumpamt = 0;
                if(this.jumpcounter < preptime)
                    jumpamt = -(this.jumpcounter * 0);
                else if(this.jumpcounter > hangtime+preptime)
                    jumpamt = -((hangtime+preptime+preptime)-this.jumpcounter) * 0;
                else    
                {
                    var x = this.jumpcounter - preptime;
                    jumpamt = .080*((-((x/1.4)-heighttimeoffset)*((x/1.4)-heighttimeoffset))+height) -(preptime * 0) ;
                }
                
                finalt = [finalt[0],finalt[1],this.jumpstart + jumpamt];
                this.jumpcounter += ((hangtime+preptime+preptime)/39.0) *updateFreqDivisor;
            }
            
        }
        
        if(motionvec)
            finalt = MATH.addVec3(motionvec,finalt);
        if(motionvec && false)
        {
            var sphpt = finalt.slice(0);
            sphpt[2] += 1;
           
            
            var newpos = this.collisionOffset(motionvec,sphpt,0);
            newpos[2] -= 1;
            finalt = newpos;//MATH.addVec3(motionvec,finalt);
        }
        
        
            //if the character is not completely still, and they're not jumpping, then check their motion vector 
            //for intersetions, and prevent penetration through objects
            if((MATH.lengthVec3(this.originalvelocity) > .001 || motionvec))
            {
                this.skin.PickPriority = -1;
                
                
                motionvec = motionvec ? MATH.toUnitVec3(motionvec) : [0,0,0];
                var testpos = MATH.subVec3(finalt,MATH.scaleVec3(motionvec,-.15));
                
                

                var intersectfront = _SceneManager.CPUPick(MATH.addVec3(testpos,[0,0,1]),motionvec,this.pickoptions);
                
                if(intersectfront)
                {
                    if(intersectfront.distance < .3)
                    {
                        
                        var offset = MATH.subVec3(originalpos,finalt);
                        var len = MATH.lengthVec3(offset);
                        offset = MATH.scaleVec3(offset,1/MATH.lengthVec3(offset));
                        var norm = [intersectfront.norm[0],intersectfront.norm[1],intersectfront.norm[2]];
                        
                        if(Math.abs(norm[0]) < .05) norm[0] = 0;
                        if(Math.abs(norm[1]) < .05) norm[1] = 0;
                        if(Math.abs(norm[2]) < .05) norm[2] = 0;
                        
                        var R = MATH.scaleVec3(norm,.3 - intersectfront.distance); 
                        
                        finalt = MATH.addVec3(finalt,R);
                    }
                }
                _DEALLOC(intersectfront);
                var falldist = 1000;
               
                if(!this.inMotion('jump') || this.jumpcounter > 20)
                {
                var intersect = _SceneManager.CPUPick(MATH.addVec3(finalt,[0,0,1.7]),[0,0,-1],this.pickoptions);
                console.log(this.pickoptions);
                
                falldist = intersect?intersect.distance:falldist;
                
                if(falldist && intersect)
                {
                  
                    this.removeMotion('jump');
                    this.removeCycle('jump');
                    this.jumpcounter  = 0;
                    var zdiff = (1.7 + standing) - falldist;
                    
                    var zmove = zdiff;
                    if(zdiff < -.03 )
                    {
                       zmove = this.originalvelocity[2] - 1.0/24; 
                       
                       finalt = MATH.addVec3(finalt, [0,0,zmove]);
                       if(finalt[2] < intersect.point[2])
                         finalt[2] = intersect.point[2];
                      
                    }   
                    else if(zdiff > .33 )
                    {   
                      
                       finalt = [originalpos2[0],originalpos2[1],originalpos2[2]];
                        
                    }
                    else
                    {
                        //the 1.0 here is a fudge factor that allows for animated transitions between clamped heights.
                        finalt = MATH.addVec3(finalt, [0,0,zmove/1.0]);
                        
                    }
                    
                }
                _DEALLOC(intersect);
              }
                this.skin.PickPriority = 1;
                 
            }
            //if they are jumpping, and have been for more than a 10th of a second, start checking below them for intersections.
            //10th of second is where they start falling?
            if(this.inMotion('jump') && this.jumpcounter > 10)
            {
                this.skin.PickPriority = -1;
                var intersect = _SceneManager.CPUPick(MATH.addVec3(finalt,[0,0,2]),[0,0,-1],this.pickoptions);

                if(intersect)
                {
                   
                    var zdiff = (2+standing) - intersect.distance;
                   
                    //in this case, they've jumpped onto something
                    if(zdiff > 0.17 )
                    {
                        
                        var zdiff = (2+standing)  - intersect.distance;
                        
                        var zmove = zdiff;
                        finalt = MATH.addVec3(finalt, [0,0,zmove]);
                        this.removeMotion('jump');
                        this.removeCycle('jump');
                        this.jumpcounter  = 0;
                    }
                }
                _DEALLOC(intersect);
                this.skin.PickPriority = 1;
            }
            
        //permenantly clamp to z=0 plane
        if(finalt[2] < 0)
            finalt = [finalt[0],finalt[1],0];
        
        // keep track of how fast they were moving at this frame, so we can accelerate properly
        this.originalvelocity = MATH.subVec3(finalt,originalpos);
      
        //every 2 seconds, update the position and rotation that tend to run out of sync
        //note that we could change the update mechanism to avoid getting out of sync
        if(this.updatecounter > 180 && document["PlayerNumber"] == this.PlayerNumber)
          {
            
            vwf_view.kernel.setProperty(this.id,'transform',this.transform.internal_val,0,null);
            vwf_view.kernel.setProperty(this.id,'rotZ',this.rotZ,0,null);
             this.updatecounter = 0;
          }
          
        
        this.skin.PickPriority = 1;
        this.tbak = finalt;
        this.translation = finalt;
      
        this.rotation = backupr;
        
         for(var i = 0; i < this.updateCallbacks.length; i++)
        {
        
            this.updateCallbacks[i](this);
        }
    }
    this.collisionOffset = function(offset,opos,depth)
    {
            
            //if the character intersected something (as defined by the sphere)
            var newpos = MATH.addVec3(opos,offset);
            depth++;
            if(depth > 10)
                return opos;
            if(MATH.lengthVec3(offset) < .01)
                return opos;
            
            var spc = _SceneManager.SphereCast(newpos,.3,{ignore:[this.skin,_Editor.GetMoveGizmo(),_dGround,_dSky],filter:function(n){if(n.passable) return false;if(n.isAvatar) return false; return true;}});
           
             
            if(spc.length > 0)
            {
                var uoffset = MATH.toUnitVec3(offset);
                
                
                spc.sort(function(a,b){
                
                    return a.distance - b.distance});
                    
                    var hit = spc[0];
                
                    
                    var normal = [hit.norm[0],hit.norm[1],hit.norm[2]];
                    normal[2] = 0;
                   
                    normal = MATH.toUnitVec3(normal);
                    
                    //if moving into the contact
                    if(MATH.dotVec3(normal,offset) > 0)
                    {
                        
                        var up = [0,0,1];
                        var side = MATH.crossVec3(normal,up);
                        up = MATH.crossVec3(normal,side);
                        //build a coord system with the normal as the x
                        var collisioncoord = [
                        normal[0],normal[1],normal[2], 0,
                        side[0],side[1],side[2], 0,
                        up[0],up[1],up[2], 0,
                        0,0,0,1
                        ];
                        
                        //put motion vector into this system
                        var cc_offset = MATH.mulMat4Vec3(collisioncoord,offset);
                        
                        //remove motion relative to normal of contact
                        cc_offset[0] = 0;
                        
                        //move back to world space
                        offset = MATH.mulMat4Vec3(MATH.transposeMat4(collisioncoord),cc_offset);
                        //finalt = MATH.addVec3(offset,MATH.scaleVec3(normal,-.001));
                    
               
                        // offset = MATH.subVec3(opos,newpos);
                        return this.collisionOffset(offset,opos,depth);  
                    }                    
            }
                
            
           
    
        return newpos;
    }
    window.collide = this.collisionOffset;
    this.tick = function()
    {
        
      if(this.id == 'character-vwf') return;
      try{
        this.update();
        }catch(e){}
     
        
        
    }
     function findChildViewNode(node, name)
     {
        if(node == null)
            return null;
        if(node.vwfID == name)
            return node;
        
        else if(node && node.children){
            for(var i = 0; i < node.children.length; i++) {
                var child = findChildViewNode(node.children[i],name);
                if(child) return child;
            }
        }
        return null;
     }
     function findVWFscene()
     {
         
          return   vwf.models[0].model.nodes["index-vwf"];
         
         return null;
     }
     function findscene()
     {
             return vwf.views[0].state.scenes["index-vwf"].threeScene;
     }
     
    this.markKeyDown =function(m)
    {
        if(this.DownKeys.indexOf(m) != -1) return;
        this.DownKeys.push(m);
    }
    this.KeyIsDown=function(m)
    {
        return (this.DownKeys.indexOf(m) != -1);
    }
    this.markKeyUp=function(m)
    {
        if(this.DownKeys.indexOf(m) == -1) return;
               this.DownKeys.splice(this.DownKeys.indexOf(m),1);
    }
    
    this.addMotion =function(m)
    {
        if(this.motionStack.indexOf(m) != -1) return;
        this.motionStack.push(m);
    }
    this.inMotion=function(m)
    {
        return (this.motionStack.indexOf(m) != -1);
    }
    this.removeMotion=function(m)
    {
       
        if(this.motionStack.indexOf(m) == -1) return;
               this.motionStack.splice(this.motionStack.indexOf(m),1);
    }
    this.addCycle =function(m)
    {
        if(this.activeCycle.indexOf(m) != -1) return;
        this.activeCycle.push(m);
    }
    this.inCycle=function(m)
    {
        return (this.activeCycle.indexOf(m) != -1);
    }
    this.removeCycle=function(m)
    {
        if(this.activeCycle.indexOf(m) == -1) return;
               this.activeCycle.splice(this.activeCycle.indexOf(m),1);
    }
    this.exclusiveMotion=function(m)
    {
        this.motionStack = [m];
    }     
    this.walk = function()
    {
        if(this.inMotion('walk'))return;
        if(this.inMotion('jump'))return;
        this.addMotion('walk');
        this.removeCycle('walk');
        this.addCycle('walk');

    }
    this.walkback = function()
    {
        if(this.inMotion('walkback'))return;
        if(this.inMotion('jump'))return;
        this.addMotion('walkback');
        this.removeCycle('walkback');
        this.addCycle('walkback');
    }
    this.run = function()
    {
        if(this.inMotion('run'))return;
        if(this.inMotion('jump'))return;
        this.addMotion('run');
        this.removeCycle('run');
        this.addCycle('run');
    }
    this.cancelRun = function()
    {
        if(!this.inMotion('run'))return;
        this.removeMotion('run');
        this.removeCycle('run');
        if(this.inMotion('walk'))
        { 
            this.removeMotion('walk');
            this.walk();
        }
    }
    this.stand = function()
    {
        this.motionStack = [];
        this.removeCycle('stand');
        this.addCycle('stand');
    }
    this.jump = function()
    {
        if(this.inMotion('walkback'))return;
        if(this.inMotion('jump'))return;
        this.addMotion('jump');
        this.jumpcounter = 0;
        this.cycles.jump.reset();
        this.removeCycle('jump');
        this.addCycle('jump');
        this.jumpstart = this.translation[2];
       
    }   
    this.runningjump = function()
    {
       
        if(this.inMotion('jump'))return;
        this.addMotion('jump');
        this.jumpcounter = 0;
        this.cycles.runningjump.reset();
        this.removeCycle('runningjump');
        this.addCycle('runningjump');
       
    }      

    this.keyUp = function(e)
         {          
          
             if(this.id == 'character-vwf') return;
            if(vwf.client() != this.ownerClientID) return;
            if(!e.keysDown.W && !e.keysDown.uparrow)
             {   this.removeMotion('walk'); this.removeCycle('walk');}
            if(!e.keysDown.S && !e.keysDown.downarrow)
                {   this.removeMotion('walkback'); this.removeCycle('walkback');} 
            if(!e.keysDown.D)
                {this.removeMotion('straferight'); this.removeMotion('strafeleft'); this.removeCycle('straferight'); this.removeCycle('strafeleft');}
            if(!e.keysDown.C && !e.keysDown.rightarrow)
                {this.removeMotion('turnright'); this.removeMotion('turnleft'); this.removeCycle('turnright'); this.removeCycle('turnleft');}    
            if(!e.keysDown.A  )
                {this.removeMotion('strafeleft');this.removeMotion('straferight'); this.removeCycle('strafeleft');this.removeCycle('straferight');}
            if(!e.keysDown.Z && !e.keysDown.leftarrow)
                {this.removeMotion('turnleft'); this.removeMotion('turnright'); this.removeCycle('turnleft'); this.removeCycle('turnright');}        
            if(!e.keysDown.W  && !e.keysDown.uparrow && this.inMotion('run'))
                this.cancelRun();       
            
         }
    this.keyDown = function(e)
         {
           
            if(this.id == 'character-vwf') return;
           if(vwf.client() != this.ownerClientID) return;
            
            if(e.keysDown.W || e.keysDown.uparrow)
                this.walk();
            if(e.keysDown.S || e.keysDown.downarrow)
                this.walkback();
            if(e.keysDown.space && !e.mods.shift)
            {
                if(!this.inMotion('run'))
                    this.jump();
                else
                    this.runningjump();
            }
            if(e.keysDown.D  && !this.inMotion('walkback'))
               { this.addMotion('straferight');  this.addCycle ('straferight');  }
            if(e.keysDown.D && this.inMotion('walkback'))
               { this.addMotion('strafeleft');  this.addCycle ('strafeleft');  }
            if(e.keysDown.A && !this.inMotion('walkback'))
               { this.addMotion('strafeleft');    this.addCycle ( 'strafeleft');   }
            if(e.keysDown.A && this.inMotion('walkback'))
               { this.addMotion('straferight');   this.addCycle ( 'straferight');   }
               
             if((e.keysDown.C || e.keysDown.rightarrow) && !this.inMotion('walkback'))
               { this.addMotion('turnright');   }
            if((e.keysDown.C || e.keysDown.rightarrow) && this.inMotion('walkback'))
               { this.addMotion('turnleft');    }
            if((e.keysDown.Z || e.keysDown.leftarrow) && !this.inMotion('walkback'))
               { this.addMotion('turnleft');      }
            if((e.keysDown.Z || e.keysDown.leftarrow )&& this.inMotion('walkback'))
               { this.addMotion('turnright');    }
            if(e.mods.shift && e.keysDown.W)
                this.run();    
         }
    
