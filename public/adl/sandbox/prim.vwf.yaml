# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
---
extends: http://vwf.example.com/node3.vwf
methods:
  GetMesh:
  updateStack:
  updateSelf:
  dirtyStack:
  GetBounds:
  initTexture:
  getTexture:
  setupMaterial:
  setTransparent:
properties:
  isStatic:
  materialDef:
    get: |
            return this.getTexture();
    set: |
             
             this.materialDef = value;
             this.initTexture(value);
  transparent:           
    set: |
             this.setTransparent(value); 
scripts:
- |  
    this.getTexture = function()
    {
            if(this.materialDef) return this.materialDef;    
            if(!this.mesh)
                return null;
            var currentMaterial = this.mesh.material;
            if(!currentMaterial)
                return;
            return GLGE.MaterialManager.getDefForMaterial(currentMaterial);
    
    }
    this.setupMaterial = function()
    {
        
        //this.mesh.setMaterial(new GLGE.Material());
        this.initTexture();
    }
    this.initTexture = function(value)
    {
             
             var newMaterial = value || vwf.getProperty(this.id,'materialDef') ;//|| {shininess:10,alpha:1,ambient:{r:0,g:0,b:0},color:{r:1,g:1,b:1},emit:{r:0,g:0,b:0},reflect:.08,shadeless:false,shadow:true};
             if(!newMaterial) return;
             this.mesh.setMaterial(GLGE.MaterialManager.getMaterialByDef(newMaterial,this.mesh.getMaterial()));
            this.mesh.batchDirty = true;   
    }
    this.setTransparent = function(v)
    {
        if(this.mesh &&  this.mesh)
            this.mesh.setZtransparent(v);
    }
    this.GetMesh = function()
    {
        return this.mesh;
    }
    this.updateSelf = function()
    {
        
        this.mesh.setMesh(this.Build());
        this.mesh.isStatic = vwf.getProperty(this.id,'isStatic');
        this.mesh.batchDirty = true;
        if(this.mesh.mesh)
            this.mesh.mesh.dirtyMesh = true;		
    }
    this.dirtyStack = function()
    {
        
        this.updateStack();
    }
    this.updateStack = function()
    {
        
        this.updateSelf();
        for(var i in this.children)
        {
            return vwf.callMethod(this.children[i].id,'updateStack');
        }
        if(this.mesh.mesh)
            this.mesh.mesh.dirtyMesh = true;
    }
    this.GetBounds = function()
    {
        return this.boundingbox;
    }                