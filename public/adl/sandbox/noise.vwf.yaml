extends: http://vwf.example.com/node3.vwf
properties:
  
  amount:
    value: 0
    set: |
            this.amount = value;
            this.dirtyStack();
  noisescale:
    value: 1
    set: |
            this.noisescale = value;
            this.dirtyStack();
  iterations:
    value: 2
    set: |
            this.iterations = value;
            this.dirtyStack();
  seed:
    value: 1
    set: |
            this.seed = value;
            this.dirtyStack(); 
  effectX:
    set: |
            this.effectX = value;
            this.dirtyStack(); 
  effectY:
    set: |
            this.effectY = value;
            this.dirtyStack(); 
  effectZ:
    set: |
            this.effectZ = value;
            this.dirtyStack();             
  translation:
    set: |
            this.translation = value;
  rotation:
    set: |
            this.rotation = value;
  scale:
    set: |
            this.scale = value;
  WorldSpace:
    value: 0
    set: |
            this.WorldSpace = value;
            this.dirtyStack();              
  minAmount:
  maxAmount:
  isModifier: true
  type:
  EditorData:
    amount:
      displayname: noise amount
      property: amount
      type: slider
      min: 0
      max: 5
      step: .01
    noisescale:
      displayname: noise scale
      property: noisescale
      type: slider
      min: 0
      max: 1
      step: .01
    iterations:
      displayname: iterations
      property: iterations
      type: slider
      min: 2
      max: 5
      step: 1	
    seed:
      displayname: random seed
      property: seed
      type: slider
      min: 1
      max: 512
      step: 1
    effectX:
      displayname: Effect X
      property: effectX
      type: check
    effectY:
      displayname: Effect Y
      property: effectY
      type: check 
    effectZ:
      displayname: Effect Z
      property: effectZ
      type: check
    WorldSpace:
      displayname: Use World Positions
      property: WorldSpace
      type: check      
methods:
  GetBounds:
  updateStack:
  updateSelf:
  dirtyStack:
  GetMesh:
  noise:
events:
  childAdded:
scripts:
- |
    this.updateSelf = function()
    {
        
        var scale = vwf.getProperty(this.id,'noisescale');
        var iterations = vwf.getProperty(this.id,'iterations');
        var seed = vwf.getProperty(this.id,'seed');
        var x = vwf.getProperty(this.id,'effectX');
        var y = vwf.getProperty(this.id,'effectY');
        var z = vwf.getProperty(this.id,'effectZ');
        var world = vwf.getProperty(this.id,'WorldSpace');
        this.noise(scale,iterations,seed,x,y,z,world);
    }
    var RotateVecAroundAxis = function(Vector, Axis, Radians)
    {
        //Get a quaternion for the input matrix
        var RotationQuat = goog.vec.Quaternion.fromAngleAxis(Radians, Axis, Quat());
        var NewMatrix = goog.vec.Quaternion.toRotationMatrix4(RotationQuat, Matrix());
        return GLGE.mulMat4Vec3(NewMatrix,Vector);
    }
        
    this.PerlinNoise = function() {

        this.noise = function(x, y, z) {

           var p = new Array(512)
           var permutation = [ 151,160,137,91,90,15,
           131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
           190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
           88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
           77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
           102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
           135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
           5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
           223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
           129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
           251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
           49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
           138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
           ];
           for (var i=0; i < 256 ; i++) 
         p[256+i] = p[i] = permutation[i]; 

              var X = Math.floor(x) & 255,                  // FIND UNIT CUBE THAT
                  Y = Math.floor(y) & 255,                  // CONTAINS POINT.
                  Z = Math.floor(z) & 255;
              x -= Math.floor(x);                                // FIND RELATIVE X,Y,Z
              y -= Math.floor(y);                                // OF POINT IN CUBE.
              z -= Math.floor(z);
              var    u = fade(x),                                // COMPUTE FADE CURVES
                     v = fade(y),                                // FOR EACH OF X,Y,Z.
                     w = fade(z);
              var A = p[X  ]+Y, AA = p[A]+Z, AB = p[A+1]+Z,      // HASH COORDINATES OF
                  B = p[X+1]+Y, BA = p[B]+Z, BB = p[B+1]+Z;      // THE 8 CUBE CORNERS,

              return scale(lerp(w, lerp(v, lerp(u, grad(p[AA  ], x  , y  , z   ),  // AND ADD
                                             grad(p[BA  ], x-1, y  , z   )), // BLENDED
                                     lerp(u, grad(p[AB  ], x  , y-1, z   ),  // RESULTS
                                             grad(p[BB  ], x-1, y-1, z   ))),// FROM  8
                             lerp(v, lerp(u, grad(p[AA+1], x  , y  , z-1 ),  // CORNERS
                                             grad(p[BA+1], x-1, y  , z-1 )), // OF CUBE
                                     lerp(u, grad(p[AB+1], x  , y-1, z-1 ),
                                             grad(p[BB+1], x-1, y-1, z-1 )))));
           }
           function fade(t) { return t * t * t * (t * (t * 6 - 15) + 10); }
           function lerp( t, a, b) { return a + t * (b - a); }
           function grad(hash, x, y, z) {
              var h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE
              var u = h<8 ? x : y,                 // INTO 12 GRADIENT DIRECTIONS.
                     v = h<4 ? y : h==12||h==14 ? x : z;
              return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);
           } 
           function scale(n) { return (1 + n)/2; }
    }
    
    this.Random = function(seed)
    {
        function Rc4Random(seed)
        {
            var keySchedule = [];
            var keySchedule_i = 0;
            var keySchedule_j = 0;
            
            function init(seed) {
                for (var i = 0; i < 256; i++)
                    keySchedule[i] = i;
                
                var j = 0;
                for (var i = 0; i < 256; i++)
                {
                    j = (j + keySchedule[i] + seed.charCodeAt(i % seed.length)) % 256;
                    
                    var t = keySchedule[i];
                    keySchedule[i] = keySchedule[j];
                    keySchedule[j] = t;
                }
            }
            init(seed);
            
            function getRandomByte() {
                keySchedule_i = (keySchedule_i + 1) % 256;
                keySchedule_j = (keySchedule_j + keySchedule[keySchedule_i]) % 256;
                
                var t = keySchedule[keySchedule_i];
                keySchedule[keySchedule_i] = keySchedule[keySchedule_j];
                keySchedule[keySchedule_j] = t;
                
                return keySchedule[(keySchedule[keySchedule_i] + keySchedule[keySchedule_j]) % 256];
            }
            
            this.getRandomNumber = function() {
                var number = 0;
                var multiplier = 1;
                for (var i = 0; i < 8; i++) {
                    number += getRandomByte() * multiplier;
                    multiplier *= 256;
                }
                return number / 18446744073709551616;
            }
        }
        return new Rc4Random(seed +"");
    }
    this.getNoise= function(randarray,x,y,z,scale,iterations)
    {
            var Perlin = new this.PerlinNoise();
            var z =0;
           // return 10-GLGE.lengthVec3([x,y,z]);
            for(var j = 1; j < iterations; j++)
            {
              
              var z1 = Perlin.noise((randarray[j-1]+(x))*scale*j,
                                    (randarray[j-1]+(y))*scale*j,
                                    (randarray[j-1]+(z))*scale*j);
              z1 -= .5;
              z1 /= (j*j);
              z += z1;
            }
            return z;
    }
    this.noise = function(scale,iterations,seed,effectX,effectY,effectZ,useWorldSpace)
    {   
        
         var Random = this.Random(seed);
         if(this.amount == undefined) return;
         var mesh = this.GetMesh();
         if(!mesh)
            return;
         var m = mesh.getMesh();
         if(!m)
            return;
         var positions = [];
         for(var i=0;i<m.positions.length-2; i+=3)
         {
            positions.push([m.positions[i],m.positions[i+1],m.positions[i+2]]);
         }
         
         var normals = [];
         for(var i=0;i<m.normals.length-2; i+=3)
         {
            normals.push([m.normals[i],m.normals[i+1],m.normals[i+2]]);
         }
         
         var bounds = this.GetBounds();
         var height = bounds.max[2] - bounds.min[2];
         var length = bounds.max[0] - bounds.min[0];
         var width = bounds.max[1] - bounds.min[1];
         //if(height == 0)
            height = 1;
         //if(width == 0)
            width = 1;
         //if(length == 0)
            length = 1;
         var amt = this.amount*6.28318530718;
         var randZ = [];
         var randY = [];
         var randX = [];
         for(var j = 1; j < iterations; j++)
         {
            randZ.push(Random.getRandomNumber());
            randY.push(Random.getRandomNumber());   
            randX.push(Random.getRandomNumber());               
         }
         for(var i=0;i<positions.length; i+=1)
         {
             var totalnorm = normals[i];
             var thispos = positions[i];
             if(useWorldSpace == true)
             {
                thispos = GLGE.mulMat4Vec3(mesh.getModelMatrix(),thispos);
             }
             if(effectZ)
             {
                
                var z = this.getNoise(randZ,thispos[0]/length,thispos[1]/width,thispos[2]/height,scale,iterations);
                var zx1 = this.getNoise(randZ,(thispos[0] +.1)/length,thispos[1]/width,thispos[2]/height,scale,iterations);
                var zy1 = this.getNoise(randZ,thispos[0]/length,(thispos[1]+.1)/width,thispos[2]/height,scale,iterations);
                var x1 = [positions[i][0]+.1,positions[i][1],positions[i][2]+ zx1*amt];
                var y1 = [positions[i][0],positions[i][1]+.1,positions[i][2]+ zy1*amt];
                positions[i][2] += z * amt;
                
                var dx = GLGE.subVec3(x1,positions[i]);
                dx = GLGE.scaleVec3(dx,1/GLGE.lengthVec3(dx));
                var dy = GLGE.subVec3(y1,positions[i]);
                dy = GLGE.scaleVec3(dy,1/GLGE.lengthVec3(dy));
                var norm = GLGE.crossVec3(dx,dy);
                
                norm = GLGE.scaleVec3(norm,1/GLGE.lengthVec3(norm));
                
                var a = GLGE.crossVec3(norm,[0,0,1]);
                var tofront = goog.vec.Quaternion.createFromValues( a[0], a[1], a[2], 1 + GLGE.dotVec3(norm,[0,0,1]) );  
                var  tofront_norm = [];
                
                goog.vec.Quaternion.normalize(tofront,tofront_norm);                    
                var rotmat = goog.vec.Quaternion.toRotationMatrix4 (tofront_norm,Matrix());
                normals[i] = GLGE.mulMat4Vec3(rotmat,normals[i]);
                //normals[i][1] *= -1;
                 //normals[i][0] *= -1;
             }
             if(effectX)
             {
                var x = this.getNoise(randX,thispos[0]/length,thispos[1]/width,thispos[2]/height,scale,iterations);
                var xy1 = this.getNoise(randX,(thispos[0])/length,(thispos[1]+.1)/width,thispos[2]/height,scale,iterations);
                var xz1 = this.getNoise(randX,thispos[0]/length,(thispos[1])/width,(thispos[2]+.1)/height,scale,iterations);
                var y1 = [positions[i][0]+ xy1*amt,positions[i][1]+.1,positions[i][2]];
                var z1 = [positions[i][0]+ xz1*amt,positions[i][1],positions[i][2]+.1];
                positions[i][0] += x * amt;
                
                var dy = GLGE.subVec3(y1,positions[i]);
                dy = GLGE.scaleVec3(dy,1/GLGE.lengthVec3(dy));
                var dz = GLGE.subVec3(z1,positions[i]);
                dz = GLGE.scaleVec3(dz,1/GLGE.lengthVec3(dz));
                var norm = GLGE.crossVec3(dy,dz);
                
                norm = GLGE.scaleVec3(norm,1/GLGE.lengthVec3(norm));
                
                var a = GLGE.crossVec3(norm,[1,0,0]);
                var tofront = goog.vec.Quaternion.createFromValues( a[0], a[1], a[2], 1 + GLGE.dotVec3(norm,[1,0,0]) );  
                var  tofront_norm = [];
                
                goog.vec.Quaternion.normalize(tofront,tofront_norm);                    
                var rotmat = goog.vec.Quaternion.toRotationMatrix4 (tofront_norm,Matrix());
                normals[i] = GLGE.mulMat4Vec3(rotmat,normals[i]);
             }
             if(effectY)
             {
                var y = this.getNoise(randY,thispos[0]/length,thispos[1]/width,thispos[2]/height,scale,iterations);
                var yx1 = this.getNoise(randY,(thispos[0]+.1)/length,(thispos[1])/width,thispos[2]/height,scale,iterations);
                var yz1 = this.getNoise(randY,thispos[0]/length,(thispos[1])/width,(thispos[2]+.1)/height,scale,iterations);
                var x1 = [positions[i][0]+.1,positions[i][1]+ yx1*amt,positions[i][2]];
                var z1 = [positions[i][0],positions[i][1]+ yz1*amt,positions[i][2]+.1];
                positions[i][1] += y * amt;
                
                var dx = GLGE.subVec3(x1,positions[i]);
                dx = GLGE.scaleVec3(dx,1/GLGE.lengthVec3(dx));
                var dz = GLGE.subVec3(z1,positions[i]);
                dz = GLGE.scaleVec3(dz,1/GLGE.lengthVec3(dz));
                var norm = GLGE.crossVec3(dz,dx);
                norm = GLGE.scaleVec3(norm,1/GLGE.lengthVec3(norm));
                
                var a = GLGE.crossVec3(norm,[0,1,0]);
                var tofront = goog.vec.Quaternion.createFromValues( a[0], a[1], a[2], 1 + GLGE.dotVec3(norm,[0,1,0]) );  
                var  tofront_norm = [];
                
                goog.vec.Quaternion.normalize(tofront,tofront_norm);                    
                var rotmat = goog.vec.Quaternion.toRotationMatrix4 (tofront_norm,Matrix());
                normals[i] = GLGE.mulMat4Vec3(rotmat,normals[i]);
              }
              normals[i] = GLGE.scaleVec3(normals[i],1/GLGE.lengthVec3(normals[i]));
         }
         var newpositions = []
         for(var i=0;i<positions.length; i+=1)
         {
            newpositions.push(positions[i][0]);
            newpositions.push(positions[i][1]);
            newpositions.push(positions[i][2]);
         }
         
         m.setPositions(newpositions);
         
         var newnormals = []
         for(var i=0;i<normals.length; i+=1)
         {
            newnormals.push(normals[i][0]);
            newnormals.push(normals[i][1]);
            newnormals.push(normals[i][2]);
             
         }
         
         m.setNormals(newnormals);
        
    }
    this.updateStack = function()
    {
        if(this.amount == undefined) return;
        this.updateSelf();
        for(var i in this.children)
        {
            return vwf.callMethod(this.children[i].id,'updateStack');
        }
    }
    this.initialize = function()
    {
         
    }
    this.GetMesh = function()
    {
        if(this.amount == undefined) return;
        return vwf.callMethod(vwf.parent(this.id),'GetMesh');
    }
    this.GetBounds = function()
    {
        if(this.amount == undefined) return;
        return vwf.callMethod(vwf.parent(this.id),'GetBounds');
    }
    this.dirtyStack = function()
    {
        if(this.amount == undefined) return;
        
        return vwf.callMethod(vwf.parent(this.id),'dirtyStack');
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    var Matrix = function()
    {
        var mat = [];
        for(var i=0; i < 16; i++)
        {
            mat.push(0);
        }
        return mat;
    }
    //quick function to initialize a blank vector array
    var Vec3 = function()
    {
        var vec = [];
        for(var i=0; i < 3; i++)
        {
            vec.push(0);
        }
        return vec;
    }
    var Quat = function()
    {
        var quat = [];
        for(var i=0; i < 4; i++)
        {
            quat.push(0);
        }
        return quat;
    };
    var RotateVecAroundAxis = function(Vector, Axis, Radians)
    {
        //Get a quaternion for the input matrix
        var RotationQuat = goog.vec.Quaternion.fromAngleAxis(Radians, Axis, Quat());
        var NewMatrix = goog.vec.Quaternion.toRotationMatrix4(RotationQuat, Matrix());
        return GLGE.mulMat4Vec3(NewMatrix,Vector);
    }