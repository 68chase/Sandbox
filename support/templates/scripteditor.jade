mixin scripteditor_head
	block

mixin scripteditor_body

		//-
			#ScriptEditorAbandonChanges.
				You have are about to load a different script, but you have unsaved changes to this script. Do you want to continue and abandon the changes? This action cannot be undone.
			#ScriptEditorCreateMethod
				input#newMethodName(type='text')
			#ScriptEditorCreateEvent
				input#newEventName(type='text')
			#ScriptEditorCreateProperty
				input#newPropertyName(type='text')
			#ScriptEditorDeleteMethod Are you sure you want to delete this script? This cannot be undone.
			#ScriptEditorDeleteProperty Are you sure you want to delete this property? This cannot be undone.
			#ScriptEditorDeleteEvent Are you sure you want to delete this script? This cannot be undone.
			#ScriptEditorMessage This script contains syntax errors, and cannot be saved.

		#ScriptEditor.verticalLayout(ng-controller='ScriptEditorController', style='z-index:99')

			#scripteditortitle.ui-dialog-titlebar.ui-widget-header.ui-corner-all.ui-helper-clearfix(style = 'padding:3px 4px 3px 4px;font:1.5em sans-serif;font-weight: bold;')
				.headericon.script
				span#scripteditortitletext.ui-dialog-title ScriptEditor 
					| {{fields.selectedNode ? '- '+(fields.selectedNode.properties.DisplayName || fields.selectedNode.id) : ''}}
				#maximizescripteditor.icon.glyphicon.glyphicon-chevron-up(style="float:right;margin-right: 20px;")
				#hidescripteditor.icon.glyphicon.glyphicon-chevron-down(style="float:right;")

			#ScriptEditorTabs.verticalLayout
				//ul
					li: a(href="#methods") Methods
					li: a(href="#events") Events
					li: a(href="#properties") Properties
					li: a(href="#options") Options
				.tabs-nav
					label(ng-class='{"selected": guiState.openTab === "methods"}')
						input(type='radio', name='openTab', ng-model='guiState.openTab', value='methods')
						| Methods
					label(ng-class='{"selected": guiState.openTab === "events"}')
						input(type='radio', name='openTab', ng-model='guiState.openTab', value='events')
						| Events
					label(ng-class='{"selected": guiState.openTab === "properties"}')
						input(type='radio', name='openTab', ng-model='guiState.openTab', value='properties')
						| Properties
					label(ng-class='{"selected": guiState.openTab === "options"}')
						input(type='radio', name='openTab', ng-model='guiState.openTab', value='options')
						| Options

				.tabs-panel.horizontalLayout(ng-show='guiState.openTab !== "options"')
					.list
						label.listitem(ng-repeat='item in currentList', ng-class='{"selected": currentList.selected===item.name, "dirty": item.dirty}')
							input(type='radio', name='selectedField', ng-model='currentList.selected', ng-value='item.name')
							| {{item.name}}

						label.listitem.suggestion(ng-repeat='item in currentSuggestions', ng-hide='hasField(item.name, currentList)'
							ng-class='{"selected": currentList.selected===item.name, "dirty": item.dirty}'
							title='Create the "{{item.name}}" method.')
							input(type='radio', name='selectedField', ng-model='currentList.selected', ng-value='item.name')
							| {{item.name}}
							
					.textinner.verticalLayout
						ace-code-editor.content(disabled='!guiState.openTab || !currentList.selected', ng-class='{"dirty": field.dirty}')
						.buttonPanel.horizontalLayout
							input#save(type='button', value='Save {{getSingular(guiState.openTab)}}')
							input#clear(type='button', value='Reset {{getSingular(guiState.openTab)}}')
							.spacer
							input#call(type='button', value='Call {{getSingular(guiState.openTab)}}')
							input#delete(type='button', value='Delete {{getSingular(guiState.openTab)}}')
							input#new(type='button', value='New {{getSingular(guiState.openTab)}}')
							input#checkSyntax(type='button', value='Check Code')
					

				#options.tabs-panel.horizontalLayout(ng-show='guiState.openTab === "options"')
					label.toggleButton(ng-class='{"checked": guiState.inheritPrototype}')
						input(type="checkbox", ng-model='guiState.inheritPrototype')
						| Show Inherited Properties
					label.toggleButton(ng-class='{"checked": guiState.showHiddenProperties}')
						input(type="checkbox", ng-model='guiState.showHiddenProperties')
						| Show Hidden Properties

